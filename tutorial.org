#+title: Systemy cząsteczkowe w WebGL - tutorial
#+startup: hidestars

Using Org-Babel to write a tutorial :).


* WebGL - szkielet

* Cząsteczki

#+name: SimpleParticleObject
#+begin_src javascript
    function Particle() {
        this.pos = vec3.create();
        this.vel = vec3.create();
        this.energy = 0.0;
        this.color = {r : 1.0, g : 1.0, b : 1.0};
    }

#+end_src

#+name: SimpleParticleDrawing
#+begin_src javascript

  function drawParticle(particle) {
  
      mvPushMatrix();
      //translate to proper location

      mat4.translate(mvMatrix, particle.pos);

      gl.uniform3f(shaderProgram.colorUniform, particle.color.r, particle.color.g, particle.color.b);

      //draw
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, particleTexture);
      gl.uniform1i(shaderProgram.samplerUniform, 0);
      
      gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexTextureCoordBuffer);
      gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, particleVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
      
      gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, particleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
      
      setMatrixUniforms();
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, particleVertexPositionBuffer.numItems);

      mvPopMatrix();
  }
    
  
#+end_src

Blablabla, opis shaderów.

#+name: FragmentShader
#+begin_src html
<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
 
    varying vec2 vTextureCoord;
 
    uniform sampler2D uSampler;
 
    uniform vec3 uColor;
 
    void main(void) {
        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = textureColor * vec4(uColor, 1.0);
    }
</script>
#+end_src
 
#+name: VertexShader
#+begin_src html
<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;
 
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
 
    varying vec2 vTextureCoord;
 
    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vTextureCoord = aTextureCoord;
    }
</script>
#+end_src



* Tangled files   
** Skeleton
#+name: Skeleton
#+begin_src html :tangle skeleton.html :noweb tangle
  <html>
    <head>
      <title>Szkielet - WebGL</title>
      <<JSIncludes>>
      <<WebGL-Skeleton>>
    </head>
    <body onload="webGLStart();">
      <<Canvas>>
    </body>
  </html>
#+end_src
*** Substructure
#+name: WebGL-Skeleton
#+begin_src html
  <script type="text/javascript">
    var gl;
    <<WebGL-Matrices-Skeleton>>
    <<WebGL-Canvas-Init>>
    <<WebGL-Init-Skeleton>>
    <<WebGL-DrawScene-Skeleton>>
    <<WebGL-Tick-Skeleton>>
  </script>
#+end_src

#+name: WebGL-Init-Skeleton
#+begin_src javascript
    function webGLStart() {
        var canvas = document.getElementById("webgl_canvas");
        initGL(canvas);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
 
        tick();
    }
#+end_src

#+name: WebGL-Tick-Skeleton
#+begin_src javascript
    function tick() {
        requestAnimFrame(tick);
        drawScene();
    }
#+end_src

#+name: WebGL-DrawScene-Skeleton
#+begin_src javascript
 
    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
 
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
 
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
        gl.enable(gl.BLEND);

        //tu kod rysujacy
     }

#+end_src

#+name: WebGL-Matrices-Skeleton
#+begin_src javascript
    var pMatrix = mat4.create();
#+end_src

** Simple particle

#+name: Example - simple particle
#+begin_src html :tangle simple-particle.html :noweb tangle
  <html>
    <head>
      <title>Pojedyncza cząsteczka</title>
      <<JSIncludes>>
      <<FragmentShader>>
      <<VertexShader>>
      <<WebGL-Simple-Particle>>
    </head>
    <body onload="webGLStart();">
      <<Canvas>>
    </body>
  </html>
  
#+end_src

*** Substructure

#+name: WebGL-Simple-Particle
#+begin_src html
  <script type="text/javascript">
    <<WebGL-Matrix-Code>>
    <<WebGL-Canvas-Init>>
    <<WebGL-Shaders-Init>>
    <<WebGL-Buffers-Init>>
    <<WebGL-Textures-Load>>
    <<WebGL-Texture-Init-Simple-Particle>>

    <<SimpleParticleObject>>
    <<SimpleParticleDrawing>>

    <<WebGL-World-Init-Simple-Particle>>
    <<WebGL-Init-Simple-Particle>>

    <<WebGL-DrawScene-Simple-Particle>>
    <<WebGL-Tick-Simple-Particle>>
  </script>
#+end_src

#+name: WebGL-Matrices-Simple-Particle
#+begin_src javascript
    var pMatrix = mat4.create();
#+end_src

#+name: WebGL-Init-Simple-Particle
#+begin_src javascript
    function webGLStart() {
        var canvas = document.getElementById("webgl_canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        initTexture();
        initWorld();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
 
        tick();
    }
#+end_src

#+name: WebGL-World-Init-Simple-Particle
#+begin_src javascript
    var testParticle;
    
    function initWorld() {
        testParticle = new Particle();
        testParticle.pos = vec3.create([1, 1, -5]);
    }
#+end_src

#+name: WebGL-Tick-Simple-Particle
#+begin_src javascript
    function tick() {
        requestAnimFrame(tick);
        drawScene();
    }
#+end_src

#+name: WebGL-DrawScene-Simple-Particle
#+begin_src javascript
 
    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
 
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
 
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
        gl.enable(gl.BLEND);

        mat4.identity(mvMatrix);
        //tu kod rysujacy

        drawParticle(testParticle);
     }

#+end_src


#+name: WebGL-Texture-Init-Simple-Particle
#+begin_src javascript
    var particleTexture;
 
    function initTexture() {
        particleTexture = gl.createTexture();
        particleTexture.image = new Image();
        particleTexture.image.onload = function () {
            handleLoadedTexture(particleTexture)
        }
 
        particleTexture.image.src = "data/star.gif";
    }
#+end_src


** Simple emitter

#+name: Example - simple emitter
#+begin_src html :tangle simple-emitter.html :noweb tangle
  <html>
    <head>
      <title>Emiter cząstek</title>
      <<JSIncludes>>
      <<FragmentShader>>
      <<VertexShader>>

      <<WebGL-Simple-Emitter>>
    </head>
    <body onload="webGLStart();">
      <<Canvas>>
    </body>
  </html>
  
#+end_src

*** Substructure

#+name: WebGL-Simple-Emitter
#+begin_src html
  <script type="text/javascript">
    <<WebGL-Matrix-Code>>
    <<WebGL-Canvas-Init>>
    <<WebGL-Shaders-Init>>
    <<WebGL-Buffers-Init>>
    <<WebGL-Textures-Load>>
    <<WebGL-Texture-Init-Simple-Emitter>>

    <<SimpleParticleObject>>
    <<SimpleParticleEmitter>>

    <<WebGL-World-Init-Simple-Emitter>>
    <<WebGL-Init-Simple-Emitter>>

    <<WebGL-DrawScene-Simple-Emitter>>
    <<WebGL-Tick-Simple-Emitter>>
  </script>
#+end_src

#+name: WebGL-Init-Simple-Emitter
#+begin_src javascript
    function webGLStart() {
        var canvas = document.getElementById("webgl_canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        initTexture();
        initWorld();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
 
        tick();
    }
#+end_src

#+name: WebGL-World-Init-Simple-Particle
#+begin_src javascript
    var testParticle;
    
    function initWorld() {
        testParticle = new Particle();
        testParticle.pos = vec3.create([1, 1, -5]);
    }
#+end_src

#+name: WebGL-Tick-Simple-Particle
#+begin_src javascript
    function tick() {
        requestAnimFrame(tick);
        drawScene();
    }
#+end_src

#+name: WebGL-DrawScene-Simple-Particle
#+begin_src javascript
 
    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
 
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
 
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
        gl.enable(gl.BLEND);

        mat4.identity(mvMatrix);
        //tu kod rysujacy

        drawParticle(testParticle);
     }

#+end_src


#+name: WebGL-Texture-Init-Simple-Particle
#+begin_src javascript
    var particleTexture;
 
    function initTexture() {
        particleTexture = gl.createTexture();
        particleTexture.image = new Image();
        particleTexture.image.onload = function () {
            handleLoadedTexture(particleTexture)
        }
 
        particleTexture.image.src = "data/star.gif";
    }
#+end_src



      < <SimpleParticleObject> >
      < <SimpleEmitterObject> >

* /b/

** Links to use in the tutorial
*** http://nehe.gamedev.net/tutorial/particle_engine_using_triangle_strips/21001/
*** http://webgl-tuts.webninja.eu/#tutorials-tutorial10- (!!??!)
*** http://learningwebgl.com/blog/?p=1008
** Unassigned code
#+name: JSIncludes
#+begin_src html
  <script type="text/javascript" src="js/gl-matrix-min.js"></script>
  <script type="text/javascript" src="js/webgl-utils.js"></script>
#+end_src

#+name: Canvas
#+begin_src html
  <canvas id="webgl_canvas" style="border: none;" width="640" height="480"></canvas>
#+end_src



#+name: WebGL-Canvas-Init
#+begin_src javascript
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }
#+end_src

#+name: WebGL-Shaders-Init
#+begin_src javascript
 
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }
 
        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }
 
        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }
 
        gl.shaderSource(shader, str);
        gl.compileShader(shader);
 
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }
 
        return shader;
    }

    var shaderProgram;
 
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");
 
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
 
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }
 
        gl.useProgram(shaderProgram);
 
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
 
        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);
 
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
        shaderProgram.colorUniform = gl.getUniformLocation(shaderProgram, "uColor");
    }

#+end_src

#+name: WebGL-Matrix-Code
#+begin_src javascript
    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();
 
    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }
 
    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }
 
 
    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }

#+end_src

#+name: WebGL-Textures-Load
#+begin_src javascript
    function handleLoadedTexture(texture) {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
 
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

#+end_src


#+name: WebGL-Buffers-Init
#+begin_src javascript
    var particleVertexPositionBuffer;
    var particleVertexTextureCoordBuffer;
 
    function initBuffers() {
        particleVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexPositionBuffer);
        vertices = [
            -1.0, -1.0,  0.0,
             1.0, -1.0,  0.0,
            -1.0,  1.0,  0.0,
             1.0,  1.0,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        particleVertexPositionBuffer.itemSize = 3;
        particleVertexPositionBuffer.numItems = 4;
 
        particleVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexTextureCoordBuffer);
        var textureCoords = [
            0.0, 0.0,
            1.0, 0.0,
            0.0, 1.0,
            1.0, 1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        particleVertexTextureCoordBuffer.itemSize = 2;
        particleVertexTextureCoordBuffer.numItems = 4;
    }
 
#+end_src


   
* TO DO
** DONE Empty canvas
** DONE Particle code + display
*** TODO Press a button/link to change particle color ;).
** TODO Particle emitter code + display
   - demo a simple (magic) explosion
** TODO Improved emitter (physics) + display
   - demo snowe
   - demo smoke
   - demo jet
** TODO Bonus
   - particles that follow path
   - demo <3 :).
