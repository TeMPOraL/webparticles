#+title: Systemy cząsteczkowe w WebGL - tutorial
#+startup: hidestars

Using Org-Babel to write a tutorial :).

* Cząsteczki

#+name: FragmentShader
#+begin_src html
<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
 
    varying vec2 vTextureCoord;
 
    uniform sampler2D uSampler;
 
    uniform vec3 uColor;
 
    void main(void) {
        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = textureColor * vec4(uColor, 1.0);
    }
</script>
#+end_src
 
#+name: VertexShader
#+begin_src html
<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;
 
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
 
    varying vec2 vTextureCoord;
 
    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vTextureCoord = aTextureCoord;
    }
</script>
#+end_src



* Tangled files   
** Skeleton
#+name: Skeleton
#+begin_src html :tangle skeleton.html :noweb tangle
  <html>
    <head>
      <<JSIncludes>>
      <<WebGL-Skeleton>>
    </head>
    <body onload="webGLStart();">
      <<Canvas>>
    </body>
  </html>
#+end_src

#+name: WebGL-Skeleton
#+begin_src html
  <script type="text/javascript">
    var gl;
    <<WebGL-Matrices-Skeleton>>
    <<WebGL-Canvas-Init>>
    <<WebGL-Init-Skeleton>>
    <<WebGL-DrawScene-Skeleton>>
    <<WebGL-Tick-Skeleton>>
  </script>
#+end_src

#+name: WebGL-Init-Skeleton
#+begin_src javascript
    function webGLStart() {
        var canvas = document.getElementById("webgl_canvas");
        initGL(canvas);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
 
        tick();
    }
#+end_src

#+name: WebGL-Tick-Skeleton
#+begin_src javascript
    function tick() {
        requestAnimFrame(tick);
        drawScene();
    }
#+end_src

#+name: WebGL-DrawScene-Skeleton
#+begin_src javascript
 
    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
 
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
 
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
        gl.enable(gl.BLEND);

        //tu kod rysujacy
     }

#+end_src

#+name: WebGL-Matrices-Skeleton
#+begin_src javascript
    var pMatrix = mat4.create();
#+end_src

** Simple particle

#+name: Example - simple particle
#+begin_src html :tangle simple-particle.html :noweb tangle
  <html>
    <head>
      <<JSIncludes>>
      <<FragmentShader>>
      <<VertexShader>>
      <<WebGL-simple-particle>>
    </head>
    <body onload="webGLStart();">
      <<Canvas>>
    </body>
  </html>
  
#+end_src

#+name: WebGL-simple-particle
#+begin_src html
  <script type="text/javascript">
    <<WebGL-Canvas-Init>>
    <<WebGL-Shaders-Init>>
    <<WebGL-Buffers-Init>>
    <<WebGL-Init>>
  </script>
#+end_src

* /b/
** Unassigned code
#+name: JSIncludes
#+begin_src html
  <script type="text/javascript" src="js/gl-matrix-min.js"></script>
  <script type="text/javascript" src="js/webgl-utils.js"></script>
#+end_src

#+name: Canvas
#+begin_src html
  <canvas id="webgl_canvas" style="border: none;" width="640" height="480"></canvas>
#+end_src

#+name: WebGL-Init
#+begin_src javascript
    function webGLStart() {
        var canvas = document.getElementById("webgl_canvas");
        initGL(canvas);
        initShaders();
//        initBuffers();
//        initTexture();
//        initWorldObjects();
 
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
 
//        document.onkeydown = handleKeyDown;
//        document.onkeyup = handleKeyUp;
 
        tick();
    }
#+end_src

#+name: WebGL-Canvas-Init
#+begin_src javascript
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }
#+end_src

#+name: WebGL-Shaders-Init
#+begin_src javascript

#+end_src

#+name: WebGL-Buffers-Init
#+begin_src javascript
    var particleVertexPositionBuffer;
    var particleVertexTextureCoordBuffer;
 
    function initBuffers() {
        particleVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexPositionBuffer);
        vertices = [
            -1.0, -1.0,  0.0,
             1.0, -1.0,  0.0,
            -1.0,  1.0,  0.0,
             1.0,  1.0,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        particleVertexPositionBuffer.itemSize = 3;
        particleVertexPositionBuffer.numItems = 4;
 
        particleVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, particleVertexTextureCoordBuffer);
        var textureCoords = [
            0.0, 0.0,
            1.0, 0.0,
            0.0, 1.0,
            1.0, 1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        particleVertexTextureCoordBuffer.itemSize = 2;
        particleVertexTextureCoordBuffer.numItems = 4;
    }
 
#+end_src



* TO DO
** TODO Empty canvas
** TODO Particle code + display
** TODO Particle emitter code + display
   - demo a simple (magic) explosion
** TODO Improved emitter (physics) + display
   - demo snowe
   - demo smoke
   - demo jet
** TODO Bonus
   - particles that follow path
   - demo <3 :).
